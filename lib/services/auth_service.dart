import 'package:brew_crew/models/user.dart';
import 'package:brew_crew/services/database.dart';
import 'package:firebase_auth/firebase_auth.dart';

//NB: we use model so that utilization and maniplation of data can be easier

class AuthService {
  //instance of firebase auth that allows us to communicate with firebase auth on the backend
  final FirebaseAuth _auth = FirebaseAuth.instance;

  //create user object based on FirebaseUser i.e User?
  UserData? _userFromFirebaseUser(User? user) {
    //this fn is used to pass the User? data into the model 
    //the uid inside the user object passed into _userFromFirebaseUser fn will be passed into the UserData model
    return user != null ? UserData(uid: user.uid) : null;
  }

  //auth change user stream
  //stream returns to us data whenever there's is change i.e it throws away the old data and returns the new data
  //the stream return to us(User?) whenever there is change in authentication
  //User? is the data we are getting back from the stream when the user sign's in
  //the FirebaseAuth service is going send to something to us every time the user sign's in or out
  //and that something could be a null value if they signed out or user object if they signed in
  //our flutter app is going to receive those event object when they happen
  // and determine based on the value inside of them whether they are user object or not i.e
  //whether the user is logged in or not and at that moment we want ot update our ui appropriately
  //the firebaseAuth service has a stream built into it that we can listen to by invoking a fn call
  //authStateChanges()
  //and it's built into the FirebaseAuth library
  //the streams authStateChanges() returns User? but
  //we are using UserData and not User
  //cus we pass our data gotten into the model Userdata using the fn _userFromFirebaseUser
  Stream<UserData?> get user {
    //the firebaseAuth service as a stream built into it that we can listen to by invoking a fn call
    //authStateChanges()
    //and it's built into the FirebaseAuth library
    //hence we use it with _auth since _auth = FirebaseAuth.instance
    return _auth
        .authStateChanges()
        .map((User? user) => _userFromFirebaseUser(user));
    //.map(_userFromFirebaseUser);
    //we're mapping it based on our UserData class and we use  _userFromFirebaseUser(user)
    //to pass the data gotten i.e User?(in the signInAnon fn i.e User? user = result.user;) into our model, UserData
  }
  //you don't have to use a model. you can you the data gotten i.e User? directly

  //sign in anonymously
  Future signInAnon() async {
    try {
      UserCredential result = await _auth.signInAnonymously();
      //_auth.signInAnonymously(); tries to log us into the app and returns a result object and inside we have access to a user object
      //which represent the user
      User? user = result.user;
      //we get the user object from the result object(result.user)
      //and put it inside a variable user of type User?
      //we can return the user
      //return user;
      //we get data of type Map
      return _userFromFirebaseUser(user);
    } catch (e) {
      print(e.toString());
      return null;
    }
  }

  //register with email and password
  Future registerWithEmailAndPassword(String email, String password) async {
    try {
      //creating a new user
      UserCredential result = await _auth.createUserWithEmailAndPassword(
          email: email, password: password);

      //getting the user
      User? user = result.user;
      //NB: result.user has a uid property

      //once we've succesfully created a new user and we get the user, before returning the user,
      // we want to create a new document for the user with the ID(uid) that comes with the user, that's autogenerated by firebase

      //create a new document for the user with the uid
      await DatabaseService(uid: user!.uid)
          .updateUserData("0", "new crew member", 100);
          //we are using the hundreds for strength cus we are going to use it in conjunction with colors
          //i.e is strength of colors
          //we are trying to create a new record for the user
          //"0", "new crew member", 100 are the default values. they will be replaced by the user in the settings form
      return _userFromFirebaseUser(user);
    } catch (e) {
      print(e.toString());
      return null;
    }
  }

  //sign in with email and password
  Future signInWithEmailAndPassword(String email, String password) async {
    try {
      UserCredential result = await _auth.signInWithEmailAndPassword(
          email: email, password: password);

      User? user = result.user;
      return _userFromFirebaseUser(user);
    } catch (e) {
      print(e.toString());
      return null;
    }
  }

  //sign out
  Future signOut() async {
    try {
      return await _auth.signOut();
    } catch (e) {
      print(e.toString());
      return null;
    }
  }
}
